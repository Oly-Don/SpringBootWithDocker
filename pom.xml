<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.cn.south.tester</groupId>
    <artifactId>SpringBootWithDocker</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>fristspringboot</name> <!-- docker 插件规定镜像名用小写字母 -->
    <description>Docker Project For Spring Boot</description>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.4.0.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <docker.version.env>${docker.version.env}</docker.version.env>
        <docker.registry>192.168.0.183:5000</docker.registry>
        <maven.build.timestamp.format>yyyyMMddHH</maven.build.timestamp.format>
        <java.version>1.8</java.version>
        <testng.version>6.11</testng.version>
        <selenium.version>2.53.0</selenium.version>
        <selenide.version>3.5</selenide.version>
    </properties>


    <!-- 用法  mvn clean package docker:build  -DpushImage -P dev-->
    <profiles>
        <!--
        mvn -P dev/mvn -P test 先查找<profile>标签,采用对应id=dev、test下的docker.version.env值.
        而docker.version.env被pom.xml中被引用了,实现不同环境替换这个标签的效果。
        -->
        <profile>
            <id>dev</id>
            <properties>
                <!-- 开发环境 -->
                <docker.version.env>devbranch</docker.version.env>
            </properties>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
        </profile>
        <profile>
            <id>test</id>
            <properties>
                <!-- 测试环境 -->
                <docker.version.env>testbranch</docker.version.env>
            </properties>
        </profile>
        <profile>
            <id>pre</id>
            <properties>
                <!-- 预生产环境 -->
                <docker.version.env>prebranch</docker.version.env>
            </properties>
        </profile>
        <profile>
            <id>prd</id>
            <properties>
                <!-- 正式环境 -->
                <docker.version.env>masterbranch</docker.version.env>
            </properties>
        </profile>
    </profiles>


    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
            <!--docker 打包-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.4.13</version>
                <configuration>
                    <imageName>${project.name}-${docker.version.env}-${maven.build.timestamp}</imageName><!-- 镜像名称 -->
                    <dockerDirectory>${basedir}/src/main/docker</dockerDirectory><!-- Dockerfile文件地址 -->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <!-- ${project.build.directory},项目构建输出目录，默认为target/ -->
                            <directory>${project.build.directory}</directory>
                            <!-- ${project.build.directory},打包出来的jar名称，默认为${project.artifactId}-${project.version} -->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                    <serverId>localdockerregistry</serverId>
                    <registryUrl>http://192.168.0.183/v2/</registryUrl>
                </configuration>
                <!--绑定docker命令道mvn命令的生命周期里去-->
                <executions>
                    <execution>
                        <id>build-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>tag-image</id>
                        <phase>package</phase>
                        <goals>
                            <goal>tag</goal>
                        </goals>
                        <!-- tag打标签的规范：私仓的url：port/项目名+时间戳+环境变量@Todo  -->
                        <configuration>
                            <image>${project.name}-${docker.version.env}-${maven.build.timestamp}</image>
                            <newName>${docker.registry}/${project.name}-${docker.version.env}-${maven.build.timestamp}
                            </newName>
                            <forceTags>true</forceTags>
                        </configuration>
                    </execution>
                    <execution>
                        <id>push-image</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <imageName>
                                ${docker.registry}/${project.name}-${docker.version.env}-${maven.build.timestamp}
                            </imageName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <!--selenium-->
        <!--https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java-->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${selenium.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-server -->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-server</artifactId>
            <version>2.50.0</version>
        </dependency>
        <!--https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-firefox-driver-->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-firefox-driver</artifactId>
            <version>${selenium.version}</version>
        </dependency>
        <!--https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-chrome-driver-->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-chrome-driver</artifactId>
            <version>${selenium.version}</version>
        </dependency>
        <!--https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-support-->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-support</artifactId>
            <version>${selenium.version}</version>
        </dependency>
        <!--TESTNG-->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
        </dependency>
        <!--mock自定义测试模块-->
        <!-- https://mvnrepository.com/artifact/com.squareup.okhttp3/mockwebserver -->
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>mockwebserver</artifactId>
            <version>3.6.0</version>
            <!--<scope>test</scope>-->
        </dependency>
        <!--单元测试mockito-->
        <!-- https://mvnrepository.com/artifact/org.mockito/mockito-all -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <version>1.10.19</version>
            <!--<scope>test</scope>-->
        </dependency>
        <!--接口测试自动化-->
        <!-- https://mvnrepository.com/artifact/io.rest-assured/rest-assured -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>3.0.5</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest-core -->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.32</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.codeborne/selenide -->
        <dependency>
            <groupId>com.codeborne</groupId>
            <artifactId>selenide</artifactId>
            <version>${selenide.version}</version>
        </dependency>
    </dependencies>

    <!-- Aliyun repository -->
    <repositories>
        <repository>
            <id>central</id>
            <name>aliyun</name>
            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>
            <releases>
                <enabled>true</enabled>
            </releases>
        </repository>
    </repositories>

</project>
